./mutate/DeleteEdgesProcessor.cpp:116:            env_->kvstore_->asyncAppendBatch(spaceId_, partId, std::move(nebula::value(batch)),
./mutate/DeleteEdgesProcessor.cpp:138:        auto ret = env_->kvstore_->prefix(spaceId_, partId, prefix, &iter);
./mutate/AddEdgesProcessor.cpp:300:        env_->kvstore_->asyncAppendBatch(spaceId_, partId, std::move(batch),
./mutate/AddEdgesProcessor.cpp:428:    auto ret = env_->kvstore_->prefix(spaceId_, partId, prefix, &iter);
./mutate/DeleteVerticesProcessor.cpp:67:                auto retRes = env_->kvstore_->prefix(spaceId_, partId, prefix, &iter);
./mutate/DeleteVerticesProcessor.cpp:115:            env_->kvstore_->asyncAppendBatch(spaceId_, partId, std::move(nebula::value(batch)),
./mutate/DeleteVerticesProcessor.cpp:136:        auto ret = env_->kvstore_->prefix(spaceId_, partId, prefix, &iter);
./mutate/AddVerticesProcessor.cpp:307:        env_->kvstore_->asyncAppendBatch(spaceId_, partId, std::move(batch),
./mutate/AddVerticesProcessor.cpp:320:    auto ret = env_->kvstore_->prefix(spaceId_, partId, prefix, &iter);
./kv/GetProcessor.cpp:35:        auto ret = env_->kvstore_->multiGet(spaceId, partId, kvKeys, &values);
./query/ScanVertexProcessor.cpp:54:    auto kvRet = env_->kvstore_->rangeWithPrefix(
./query/ScanEdgeProcessor.cpp:54:    auto kvRet = env_->kvstore_->rangeWithPrefix(
./StorageServer.cpp:289:        kvstore_->stop();
./test/CompactionTest.cpp:40:        auto ret = env->kvstore_->prefix(spaceId, part, prefix, &iter);
./test/CompactionTest.cpp:83:        auto ret = env->kvstore_->prefix(spaceId, part, prefix, &iter);
./test/CompactionTest.cpp:129:        auto ret = env->kvstore_->prefix(spaceId, part, prefix, &iter);
./test/VertexCacheTest.cpp:225:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/QueryTestUtils.h:89:            env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/QueryTestUtils.h:100:            auto code = env->kvstore_->flush(spaceId);
./test/QueryTestUtils.h:172:            env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/QueryTestUtils.h:183:            auto code = env->kvstore_->flush(spaceId);
./test/QueryTestUtils.h:218:            env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/PrefixBloomFilterBenchmark.cpp:37:        env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/PrefixBloomFilterBenchmark.cpp:44:        CHECK_EQ(kvstore::ResultCode::SUCCEEDED, env->kvstore_->flush(spaceId));
./test/PrefixBloomFilterBenchmark.cpp:59:                auto code = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/StatisTaskTest.cpp:302:            auto ret = env_->kvstore_->prefix(spaceId, part, prefix, &iter);
./test/StatisTaskTest.cpp:335:            ret = env_->kvstore_->prefix(spaceId, part, prefix, &iter);
./test/TestUtils.h:49:                          env->kvstore_->prefix(spaceId, partId, prefix, &iter));
./test/TestUtils.h:160:                      env->kvstore_->prefix(spaceId, partId, prefix, &iter));
./test/TestUtils.h:198:                      env->kvstore_->prefix(spaceId, partId, prefix, &iter));
./test/TestUtils.h:277:                      env->kvstore_->prefix(spaceId, partId, prefix, &iter));
./test/IndexWriteTest.cpp:333:            auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/RebuildIndexTest.cpp:106:        auto ret = RebuildIndexTest::env_->kvstore_->prefix(1, part, prefix, &iter);
./test/RebuildIndexTest.cpp:121:        auto ret = RebuildIndexTest::env_->kvstore_->prefix(1, part, prefix, &iter);
./test/RebuildIndexTest.cpp:192:        auto ret = RebuildIndexTest::env_->kvstore_->prefix(1, part, prefix, &iter);
./test/RebuildIndexTest.cpp:209:        auto ret = RebuildIndexTest::env_->kvstore_->prefix(1, part, prefix, &iter);
./test/RebuildIndexTest.cpp:287:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/RebuildIndexTest.cpp:347:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/RebuildIndexTest.cpp:392:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/RebuildIndexTest.cpp:450:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/RebuildIndexTest.cpp:510:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/RebuildIndexTest.cpp:554:        auto code = RebuildIndexTest::env_->kvstore_->get(1, key.first, key.second, &value);
./test/GetNeighborsBenchmark.cpp:260:                auto code = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/GetNeighborsBenchmark.cpp:275:                auto code = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/AddAndUpdateVertexAndEdgeBenchmark.cpp:154:    ev->kvstore_->asyncMultiPut(spaceId, pId, std::move(data),
./test/AddAndUpdateVertexAndEdgeBenchmark.cpp:221:    ev->kvstore_->asyncMultiPut(spaceId, pId, std::move(data),
./test/LookupIndexTest.cpp:92:        env->kvstore_->asyncMultiPut(spaceId, 1, std::move(keyValues),
./test/GetPropTest.cpp:589:        auto code = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/ScanEdgePropBenchmark.cpp:101:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &kvIter);
./test/ScanEdgePropBenchmark.cpp:132:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &kvIter);
./test/ScanEdgePropBenchmark.cpp:158:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &kvIter);
./test/ScanEdgePropBenchmark.cpp:185:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &kvIter);
./test/ScanEdgePropBenchmark.cpp:220:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &kvIter);
./test/UpdateVertexTest.cpp:76:        env->kvstore_->asyncMultiPut(spaceId, part.first, std::move(data),
./test/UpdateVertexTest.cpp:200:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:335:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:444:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:529:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:645:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:778:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:813:    env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/UpdateVertexTest.cpp:1044:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:1171:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateVertexTest.cpp:1362:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:81:        env->kvstore_->asyncMultiPut(spaceId, part.first, std::move(data),
./test/UpdateEdgeTest.cpp:233:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:351:        auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:511:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:657:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:763:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:894:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:1066:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:1114:    env->kvstore_->asyncMultiPut(spaceId, partId, std::move(data),
./test/UpdateEdgeTest.cpp:1384:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:1528:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:1689:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:1810:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./test/UpdateEdgeTest.cpp:2040:    auto ret = env->kvstore_->prefix(spaceId, partId, prefix, &iter);
./BaseProcessor.inl:132:    auto addrRet = env_->kvstore_->partLeader(spaceId, partId);
./BaseProcessor.inl:147:    this->env_->kvstore_->asyncMultiPut(
./BaseProcessor.inl:159:    env_->kvstore_->asyncMultiPut(spaceId,
./BaseProcessor.inl:176:    this->env_->kvstore_->asyncMultiRemove(
./BaseProcessor.inl:187:    this->env_->kvstore_->asyncRemoveRange(
./admin/CreateCheckpointProcessor.cpp:16:    auto ret = env_->kvstore_->createCheckpoint(spaceId, std::move(name));
./admin/RebuildTagIndexTask.cpp:47:    auto ret = env_->kvstore_->prefix(space, part, prefix, &iter);
./admin/AdminProcessor.h:34:        auto ret = env_->kvstore_->part(spaceId, partId);
./admin/AdminProcessor.h:49:        auto* partManager = env_->kvstore_->partManager();
./admin/AdminProcessor.h:78:                        auto leaderRet = env_->kvstore_->partLeader(spaceId, partId);
./admin/AdminProcessor.h:196:        auto ret = env_->kvstore_->part(spaceId, partId);
./admin/AdminProcessor.h:235:        auto ret = env_->kvstore_->part(spaceId, partId);
./admin/AdminProcessor.h:270:        auto ret = env_->kvstore_->part(spaceId, partId);
./admin/AdminProcessor.h:331:        auto ret = env_->kvstore_->part(spaceId, partId);
./admin/AdminProcessor.h:360:        env_->kvstore_->allLeader(leaderIds);
./admin/StatisTask.cpp:109:    auto ret = env_->kvstore_->prefix(spaceId, part, vertexPrefix, &vertexIter, true);
./admin/StatisTask.cpp:114:    ret = env_->kvstore_->prefix(spaceId, part, edgePrefix, &edgeIter, true);
./admin/RebuildEdgeIndexTask.cpp:47:    auto ret = env_->kvstore_->prefix(space, part, prefix, &iter);
./admin/RebuildIndexTask.cpp:114:        auto operationRet = env_->kvstore_->prefix(space,
./admin/RebuildIndexTask.cpp:202:    auto operationRet = env_->kvstore_->prefix(space,
./admin/RebuildIndexTask.cpp:237:    env_->kvstore_->asyncMultiPut(space, part, std::move(data),
./admin/RebuildIndexTask.cpp:255:    env_->kvstore_->asyncRemove(space, part, std::move(key),
./admin/RebuildIndexTask.cpp:273:    env_->kvstore_->asyncMultiRemove(space, part, std::move(keys),
./admin/SendBlockSignProcessor.cpp:17:    auto code = env_->kvstore_->setWriteBlocking(spaceId, sign);
./admin/DropCheckpointProcessor.cpp:16:    auto retCode = env_->kvstore_->dropCheckpoint(spaceId, std::move(name));
./transaction/TransactionManager.cpp:336:    env_->kvstore_->asyncAppendBatch(
./transaction/TransactionManager.cpp:375:        env_->kvstore_->asyncAtomicOp(spaceId, partId, atomic, std::move(cb));
./transaction/TransactionManager.cpp:389:    env_->kvstore_->asyncMultiPut(
./transaction/TransactionManager.cpp:404:    env_->kvstore_->asyncRemove(
./transaction/GetValueProcessor.cpp:23:    auto rc = env_->kvstore_->get(spaceId, partId, key, &value);
./exec/UpdateNode.h:227:        planContext_->env_->kvstore_->asyncAppendBatch(
./exec/UpdateNode.h:549:            planContext_->env_->kvstore_->asyncAppendBatch(
./exec/EdgeNode.h:137:        ret = planContext_->env_->kvstore_->prefix(planContext_->spaceId_, partId, prefix_, &iter);
./exec/EdgeNode.h:177:        ret = planContext_->env_->kvstore_->prefix(planContext_->spaceId_, partId, prefix_, &iter);
./exec/IndexVertexNode.h:63:            ret = planContext_->env_->kvstore_->prefix(planContext_->spaceId_,
./exec/IndexScanNode.h:55:              ? planContext_->env_->kvstore_->range(planContext_->spaceId_, partId,
./exec/IndexScanNode.h:57:              : planContext_->env_->kvstore_->prefix(planContext_->spaceId_, partId,
./exec/TagNode.h:67:        ret = planContext_->env_->kvstore_->prefix(planContext_->spaceId_, partId, prefix, &iter);
./exec/IndexEdgeNode.h:54:            ret = planContext_->env_->kvstore_->prefix(planContext_->spaceId_,
./http/StorageHttpDownloadHandler.cpp:169:            auto partResult = kvstore_->part(spaceID_, partId);
./http/StorageHttpIngestHandler.cpp:94:    auto code = kvstore_->ingest(space);
